- AWS (Amazon Web Service)
   : 아마존 웹 서비스의 약자로 일종의 클라우드 컴퓨팅 서비스를 통해 서버 관련 인프라(infra)를 가상으로 생성하여 대여해주고 사용료를 징수하는 서비스
      -> 정말로 infra 관련된 모든 것을 여기서 해결할 수 있기에, iaas(infra as a service)라는 서비스 산업 측면의 용어가 생겨나게 한 계기가 되는 녀석..
          -> BUT! 말 그대로 원자재에 해당하는 느낌의 것들을 빌려주는 것이고, 그걸 활용한 서비스는 사용자가 알아서 원초적 레벨에서 다 구축을 해야한다는 단점이 존재

    @ AWS를 이용하려면, 반드시 공통적으로 해줘야 할 작업
       1. 회원 가입 후, 결제 카드 등록 하기
           -> 로그인하면 우측 상단에 지역선택을 할 수 있는데, 서울에서 운영할거면 '서울'을 클릭
       2. IAM 메뉴에 진입하여, 좌측 메뉴에 존재하는 '사용자'와 '역할'을 만들어야 함
       3. AWS의 각 서비스마다 접근 가능한 Access key를 발급받기

    @ AWS (Amazon Web Service) 사용 중지를 원할 때, 검토해야 할 내용들
       : AWS와 관련된 모든 환경과 관련된 내용을 삭제해야 함
         (= S3나 다른 DB서버 관련 서비스까지 쓴다면, 거기 있는 데이터 백업본도 삭제해야 요금으로부터 안전할 수 있음)


- AWS S3 (구글 클라우드에는 비슷한 상품으로 firebase storage가 존재)
   : AWS에서 제공하는 파일 저장소(storage) 역할을 하는 전용 서버를 대여하는 클라우드 컴퓨팅 서비스
      -> 저장소 역할을 하는 서버가 있다면, 파일 저장은 걔만 관리해주면 되는거라 관리가 쉬운 장점이 존재

    @ AWS S3 요금
       : 1년간 5GB 프리티어 적용
         (= 구글 클라우드의 firebase storage은 5GB까지 평생 무료)

    @ AWS S3 사용전 체크사항
       : IAM 메뉴에서 S3과 관련된 권한 정책을 다루는 '역할'을 생성해야 함

          1) 좌측 메뉴의 '역할' 클릭

          2) '역할 이름' 중 AmazonS3FullAccess 라는 s3 서비스 자체를 사용할 수 있게 만드는 부분에 해당하는 '역할'이 있는가?
                -> YES! s3 세팅으로
                -> NO ! 3)으로 이동
               
          3) AmazonS3FullAccess 생성
              a. [역할 만들기]라는 우측 상단의 버튼 클릭
              b. (1단계) 신뢰할 수 있는 엔터티
                   : 다음과 같이 선택
                      -> 서비스 또는 사용사례 : AWS 서비스
                      -> 사용사례 : s3

              c. (2단계) 권한추가
                   : 다음의 정책이름을 체크
                      - AmazonS3FullAccess

              d. (3단계) 이름 지정, 검토 및 생성
                   : 역할 이름 기입하고 마무리
                      -> 역할 이름 : AmazonS3FullAccess

    @ AWS S3 세팅 과정

       1. IAM 메뉴에서 S3과 관련된 권한을 가진 '사용자'를 생성 (Access키 발급이 목적)
           : 이를 통해, AWS S3에 관련된 권한만을 가진 사용자 계정을 생성 가능하며, 이를 S3에 한정된 서비스에 한정하여 여러 사용자들이 공유하여 사용이 가능함

          1) 좌측 메뉴의 '사용자' 클릭
          2) [사용자 생성]라는 우측 상단의 버튼 클릭

          3) (1단계) 사용자 세부정보 지정
               : 해당 사용자 이름을 지정하는 부분이니, 알잘딱하게 짓자 

          4) (2단계) 권한 설정
               : 직정 정책 연결을 체크하고, AmazonS3FullAccess 권한을 체크하여 사용자를 생성

       2. 1에서 생성한 '사용자' 항목의 '엑세스 키 만들기' 버튼을 클릭하여 'Access key'를 생성하여, 액세스키와 비밀키 2개를 발급받음
           : (중요) 'Access key'를 통해 AWS S3에 접근이 가능하며, '비밀키'는 해싱을 통해 요청을 보낼시 해킹으로부터 데이터를 보호함...
             (= 이거 털리면, 내 S3를 개나소나 접근하여 사용할 수 있게되며, 그 비용은 내가 떠앉게 되니 ㅈㄴ 조심하자)

       3. S3의 저장 공간을 분류하는 기준인 '버킷'을 생성
          
           1) S3 메뉴에서 [버킷 만들기] 버튼을 클릭
           2) '버킷명'은 알잘딱하게 작성하고, AWS 리전은 원하는 서버의 위치에 해당하는 지역으로 고르자 (보통은 서울 고름)

       4. '버킷'의 보안과 관련된 설정을 세팅

           1) 버킷을 만들면, 공공 접근(public access) 차단 설정이 뜸
               : 보안과 관련된 것이지만, 개인적으로 개발할거면 모두 해제하는게 좋음
                   -> (주의) 경고문이 뜨는데, 그것도 체크해서 넘기자... 물론 당연히 보안상 무장해제한 셈이라 경고문이 뜨는게 당연함
   
           2) 버킷정책 수정
               : 누가 버킷을 읽기, 수정, 삭제 할 수 있는지 정의하는 부분에 해당하는 항목
                  -> (중요) 보통은 일반인은 읽기만, 관리자는 수정, 삭제까지 가능하게 세팅

                  A. 좌측의 [버킷]을 클릭하고, [권한]에 해당하는 카테고리를 클릭
                  B. Sid가 1번은 모든 유저는 GET이 가능하고, 2번은 관리자만 PUT, DELETE가 가능하게 내용을 다음과 같이 적음
                      -> (참고) 과거에는 사용권한을 ACL 어쩌구로 설정

                    # 버킷정책 내용 참고 사항
                       a. Actions 항목의 [배열] 요소들의 의미
                           - s3:GetObject : 읽기
                           - s3:PutObject : 쓰기
                           - s3:DeleteObject : 삭제
                       b. Principal 항목
                           : 정책의 대상이 어떤 유저인지 명시하는 부분으로 
                               -> * 쓰면 모든유저
                               -> ARN주소(ARN 정보는 IAM - 사용자에 존재) 넣으면, 특정 AWS 계정을 의미
                                  (= 2번쨰 Principal 항목에 생성한 사용자의 ARN을 넣는 이유는 그 계정이 곧 관리자이기 떄문)
                                 
                       c. Resource 항목
                           : 정책의 대상 버킷에 해당하는 내용으로 "arn:aws:s3:::님들버킷명/*" 부분에 버킷명 잘 적어주면 됨 
                       
                             ex) arn:aws:s3:::codingappleimage1/* 

                     ex) 다음과 같은 구조 
                         {
                             "Version": "2012-10-17",
                             "Statement": [
                                 {
                                     "Sid": "1",
                                     "Effect": "Allow",
                                     "Principal": "*",
                                     "Action": "s3:GetObject",
                                     "Resource": "arn:aws:s3:::님들버킷명/*"
                                 },
                                 {
                                     "Sid": "2",
                                     "Effect": "Allow",
                                     "Principal": {
                                         "AWS": "님들ARN"
                                     },
                                     "Action": [
                                         "s3:PutObject",
                                         "s3:DeleteObject"
                                     ],
                                     "Resource": "arn:aws:s3:::님들버킷명/*"
                                 }
                             ]
                         } 

            3) CORS 설정 
                : 버킷정책 밑에 존재하는 설정으로 다른 사이트에서 버킷안의 파일들을 읽기, 쓰기, 삭제할 수 있는지 여부를 설정하는 부분
                   -> AllowedHeaders : 해당 [배열] 안에 header 요소만, 해당 S3에 요청을 주는데 허가됨
                   -> AllowedMethods : 해당 [배열] 안에 HTTP 메서드 요소만, 해당 S3에 요청을 주는데 허가됨
                   -> AllowedOrigins : 해당 [배열] 안에 있는 URL만, 해당 S3의 읽기, 쓰기, 삭제 명령을 다이렉트로 내릴 수 있음
                   -> ExposeHeaders  : 해당 [배열] 안에 요소만, 응답시 header에 노출됨


                     ex) CORS는 다음과 같은 구조 

                         [
                             {
                                 "AllowedHeaders": [
                                     "*"
                                 ],
                                 "AllowedMethods": [
                                     "PUT",
                                     "POST"
                                 ],
                                 "AllowedOrigins": [
                                     "*"
                                 ],
                                 "ExposeHeaders": [
                                     "ETag"
                                 ]
                             }
                         ] 


- AWS Elastic Beanstalk (구글 클라우드에는 비슷한 상품으로 App Engine이 존재)
   : 사용자가 웹서비스 코드만 올리면, 웹서버 실행부터 운영에 필요한 잡다한 녀석을 자동화해주는 AWS의 클라우드 컴퓨텅 서비스..
     (= 쉽게 말해 EC2의 상위호환에 가까운 서비스로 요금도 EC2랑 같음)
        -> Elastic Beanstalk은 EC2를 통한 서버 운영 자체를 자동화 관리해 주는 PaaS(Platform as a Service) 영역에 더 가깝다고 보면 됨
           (= 이전 EC2는 말 그대로 인프라(infra) 제공에 그치는 IaaS(Infra as a Service) 영역이라 모든 것을 수동으로 사용자가 알아서 해야했다고 보면 됨)

    @ Elastic Beanstalk 요금
       : EC2랑 똑같으며, EC2의 무료상품은 1년간 적용
         (= 구글 클라우드의 App Engine은 300$ 크래딧을 줌)

    @ Elastic Beanstalk가 작동하는 방식
       : 유저가 코드를 올린다면? 그냥 웹서버 실행부터 자질구레한 운영까지 다해줌 = 유저는 그냥 코드 업로드만 신경써라...
          -> 자동으로 AWS EC2 인스턴스 빌림
          -> npm install 눌러줘서 필요한 패키지 설치
          -> node server.js를 입력해서 서버를 실행
          -> 무료 도메인도 하나 연결해주고 
          -> 유저 많아지면 서버 확장도 설정된 한도내에서 알아서 쉽게 가능하게 하고
          -> 서버다운시 자동으로 재시작 여러번 시도..
          -> 유저가 코드를 갱신해주면, 그에 맞춰 Git과 같은 버전관리도 해주는 등...

    @ Elastic Beanstalk을 통해 Node.js 기반 웹서버 배포전 체크사항

       1. 호스팅 받는 DB가 MongoDB라면 접속가능 IP를 0.0.0.0 으로 모든 IP에서 접속가능하게 변경
           : mongodb.com의 좌측 Network access 메뉴를 통해 실행
              -> 더 안전하게 하고 싶으면, AWS VPC로 mongodb atlas 연결하는 법 같은걸 찾아서 적용

       2. IAM 메뉴에서 Elastic Beanstalk과 관련된 권한 정책을 다루는 '역할'을 생성해야 함

           1) 좌측 메뉴의 '역할' 클릭

           2) '역할 이름' 중 aws-elasticbeanstalk-ec2-role 라는 elastic beanstalk의 자동화 매커니즘이 ec2를 사용할 수 있게 만드는 부분에 해당하는 '역할'이 있는가?
                 -> YES! 4)으로 이동
                 -> NO ! 3)으로 이동
                
           3) aws-elasticbeanstalk-ec2-role 생성
               a. [역할 만들기]라는 우측 상단의 버튼 클릭
               b. (1단계) 신뢰할 수 있는 엔터티
                    : 다음과 같이 선택
                       -> 서비스 또는 사용사례 : AWS 서비스
                       -> 사용사례 : EC2

               c. (2단계) 권한추가
                    : 다음의 3개의 정책이름을 체크
                       - AWSElasticBeanstalkWebTier
                       - AWSElasticBeanstalkWorkerTier
                       - AWSElasticBeanstalkMulticontainerDocker

               d. (3단계) 이름 지정, 검토 및 생성
                    : 역할 이름 기입하고 마무리
                       -> 역할 이름 : aws-elasticbeanstalk-ec2-role 

           4) '역할 이름' 중 aws-elasticbeanstalk-service-role 라는 해당 사용자가 elastic beanstalk 자체를 사용할 수 있게 만드는 부분에 해당하는 '역할'이 있는가?
                 -> YES! Node.js 베포로 이동
                 -> NO ! 5)으로 이동

           5) aws-elasticbeanstalk-service-role 생성
               a. [역할 만들기]라는 우측 상단의 버튼 클릭
               b. (1단계) 신뢰할 수 있는 엔터티
                    : 다음과 같이 선택
                       -> 서비스 또는 사용사례 : AWS 서비스
                       -> 사용사례 : Elastic Beanstalk

               c. (2단계) 권한추가
                    : 다음의 3개의 정책이름을 체크
                       - AWSElasticBeanstalkEnhancedHealth
                       - AWSElasticBeanstalkService

               d. (3단계) 이름 지정, 검토 및 생성
                    : 역할 이름 기입하고 마무리
                       -> 역할 이름 : aws-elasticbeanstalk-service-role 

    @ Elastic Beanstalk을 통해 Node.js 기반 웹서버 배포 과정

       1. 소스코드 빌드하기
           : npm run build를 입력하여, 소스코드를 바닐라 JS로 컴파일 및 압축하기

       2. 빌드한 소스코드를 zip 파일로 압축
           : node_modules 폴더를 제외한, 프로젝트 폴더안에 있는 모든 내용을 .zip 파일로 압축

       3. AWS 사이트 상단 검색창에 Elastic beanstalk 검색한 뒤, 앱생성이나 환경생성 버튼을 클릭하여 Elastic beanstalk 생성에 필요한 세팅 시작
          
           1) '1단계' 에플리케이션 코드 info

                - 애플리케이션 이름 
                   : 알잘딱하게 작성

                - 환경 이름
                   : 마찬가지로 알잘딱하게 잘 작성

                - 플랫폼 
                   : 자신이 사용하는 Node.js 버전을 선택
                   
                - 프리셋 
                   : 무료로 쓸 생각이니, '단일 인스턴스(1대의 가상컴퓨터)' 선택
                      -> (참고) 인스턴스가 많음 = 서버가 죽거나 과부하가 걸려도 대체자들이 많다는 의미 =  안정성이 높아질 가능성이 높음

                - 코드 업로드
                   : 이걸 체크하면, 사용자가 직접 어플리케이션 코드 파일을 올린다는 의미
                      -> 버전 레이블 : 해당 웹 어플리케이션의 버전에 해당하는 이름이고 버전 체크 용도... 잘 알아서 지어줌
                      -> 로컬 파일 : 사용자가 직접 자신의 컴퓨터에서 압축된 어플리케이션 ZIP 파일을 업로드 할 떄 체크... 
                      -> 퍼블릭 S3 URL: 사용자의 S3에 존재하는 압축된 어플리케이션 ZIP 파일의 URL 주소를 직접 입력하여 업로드할 때 체크

           2) '2단계' 서비스 엑서스 구성
                : 체크사항의 '역할'과 관련된 aws-elasticbeanstalk-ec2-role, aws-elasticbeanstalk-service-role이 다 생성되었으면, '기존 서비스 역할 사용' 체크시 알아서 다 체크되어 있음
                  (= 자동으로 설정된게 없으면, IAM 메뉴에서 '역할' 관련 내용을 제대로 생성하지 않은 것)
                      - 기존 서비스 역할 : aws-elasticbeanstalk-service-role
                      - EC2 인스턴스 프로파일 : aws-elasticbeanstalk-ec2-role

           3) '3단계' 건드릴 필요없음 

           4) '4단계' 아키택처 및 인스턴스 설정
                : 아키텍쳐는 호환성 생각하면 x86_64비트 선택하고, x86 선택시 인스턴스(1대의 가상컴퓨터) 유형은 프리티어용인 t2.mirco 정도로 선택하자
                   -> 만약 웹앱 배포가 이상하게 안되면, 십중팔구는 램부족 이슈라 t2.small 이상으로 설정해보면 됨...
                      (= 근데 더 상위사양 + 여러 인스턴스(1대의 가상컴퓨터) 사용 같은건, 프리티어를 벗어나는 짓이라 이게 곧 돈이라는거 잊지 말자...)

           5) [다음]을 클릭해 배포를 마무리
               : 몇 분 기다리면, 해당 웹 서버 환경의 이름이 '서버명-env-숫자' 식으로 등장하며, URL도 어쩌구.com 식으로 뜨는데 거기 들어가면 사이트 접속이 가능
                  -> (참고) 하나의 EC2 환경당 하나의 application을 실행해둘 수 있음

       4. 배포된 웹 에플리케이션 서버의 .env에 해당하는 환경변수를 수정하려면 환경눌러서 설정 버튼 클릭
           : 좌측 화면에 다음과 같은 카테고리들이 등장
       
              - 구성 메뉴
                 : 서버의 .env 파일에 해당하는 환경 설정이 가능 
              
              - 로그 메뉴
                 : 터미널 로그 출력이 가능
              
              - 상태 메뉴
                 : 인스턴스(1대의 가상컴퓨터) 중 안 쓰는게 있으면, 끄거나 재부팅할 수 있는 메뉴
              
              - 모니터링
                 : 웹서버의 모니터링 자동으로 해주는 기능
              
                   ex) 400, 500 에러같은게 너무 잦거나 접속이 안되는 페이지가 있으면 알려줌 

    @ 실제 서버가 돌아가는 방식과 Elastic Beanstalk가 제공하는 편의
       : 실제 서버들은 최소 2개의 인스턴스(웹서버)를 띄워놓고, 각 인스턴스가 죽더라도 다른 인스턴스가 응대하는 식으로 안전하게 셋팅하는 경우가 많음
          -> 보통 Node.js 서버가 가끔 메모리 이슈로 서버가 다운되는 경우가 있는데, 이 경우 Elastic Beanstalk을 쓴다면 자동으로 서버를 재시작해 줌
              ->  서버 재시작 조건에 관심이 많고, 세밀한 세팅을 원하는 사람들은 pm2라는 라이브러리 쓰는 경우도 있음

    @ Elastic Beanstalk 관련 FAQ

       1. 웹사이트를 업데이트하고 싶다면?
           : 새로 Elastic beanstalk을 생성하여, 업데이트된 코드를 zip 파일로 압축해서 똑같은 방식으로 업로드하면 됨
               -> (주의) 재배포는 너무 자주하면 1년무료로 사용중이어도 elastic compute cloud 요금이 청구될 수 있음
                  (= 새로 Elastic beanstalk을 생성하는건 비용과 상관없음)
      
       2. 사이트 접속이 안되는데요 
           : 생성된 Elastic beanstalk 환경의 로그메뉴에서 터미널 로그를 뒤져보면 원인을 알 수 있으니 참고
       
       3. 배포시 AWS elastic beanstalk 100.0 % of the requests are erroring with HTTP 4xx 에러가 출력
           : 메인페이지 접속이 불가능하면 보통 그런 오류가 뜸
               -> 보통 DB접속 셋팅이 안되서 그런 경우가 많으니, MongoDB를 쓴다면 홈페이지에서 접근가능 ip세팅 셋팅 제대로 했나 확인 요망
       
       4. 로그 출력해보니 npm ENOMEM 에러가 출력
           : RAM 용량 부족이라 그런거니, 인스턴스 사양을 t2.small 이상으로 수정 요망 
       
       5. The instance profile aws-elasticbeanstalk-ec2-role 어쩌구가 없다는 에러 출력 
           : IAM 메뉴에서 '역할' 만드는 과정이 잘못된거니 다시 만들기
       
       6. 배포실패나 HTTP 5xx 에러가 출력
           : 복잡적인 이유... 보통 코드에 문제가 있는 경우가 있지만, 로그를 보고 원인을 찾길 바람..
             
             ex) Node.js 18버전 쓰는데 힙스터처럼 자바스크립트 최신문법인 ?? ?. 이런거 쓰는 경우

       7. Next.JS에서 Nextauth 사용하여 배포했는데, 로그인 기능이 안 됨
           : .env의 환경변수를 수정 + 소셜로그인 사용시, 거기 페이지의 API 관련 에플리케이션 항목 관련 URL 주소도 전부 AWS 웹페이지의 주소로 변경해야 함

              1) NEXTAUTH_URL 환경변수도 설정하기
                  : 프로젝트 폴더에 .env 라는 이름의 파일을 만들어서, 'NEXTAUTH_URL=AWS사이트URL'을 입력한 뒤 저장하고 다시 소스코드 zip 파일로 압축하여 업로드 배포하면 끝
                     -> (참고) 이미 배포된 프로젝트의 .env 환경변수를 수정하려면?
                          : 왼쪽 메뉴의 웹서버 환경명 클릭 후, [구성] 눌러서 환경변수 부분 편집 
                             -> 그래도 안된다면?  AWS 사이트 왼쪽 하단 보면 CloudShell을 클릭하여, 터미널에 진입 후.. 다음과 같은 명령어를 입력하면, 수정이 가능해짐

                                ex) eb use 웹서버환경명
                                    eb setenv NEXTAUTH_URL=AWS사이트URL

                                ex) (참고) 이외 유용한 명령어
                                    eb list      <- 환경 목록들을 출력 
                                    eb printenv  <- 현재 환경변수 출력

 
              2) 소셜로그인 사용시, API 관련 에플리케이션 항목 관련 URL 주소도 전부 AWS 웹페이지의 주소로 변경

                 ex) Github의 OAuth
                      : Github.com의 설정 - 개발자설정 - OAuth용 앱 만든거 들어간 뒤, 'Homepage URL', 'Authorization callback URL' 전부 AWS의 도메인 URL로 변경
                         -> (중요) OAuth용 앱을 2개 만들어놓으면 편리한 게, 그냥 그거 하나로 다른 앱에 모두 적용이 가능하기 때문