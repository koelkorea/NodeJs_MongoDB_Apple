Node.js 강의 나가는 말
 

Q. 다른 프레임워크?

더 빠른걸 원하면 Fastify
Spring처럼 코드 짜고 싶으면 Nest.js
리액트 좋아하고 client side rendering 많이 넣고 싶으면 Next.js 이런 선택지도 있습니다.

거의 모든 백엔드 기능은 동작 원리는 똑같고 라이브러리 문법이나 코딩패턴만 다르기 때문에
다른 라이브러리나 프레임워크 만나도 잘할 수 있습니다.
이제 아마 튜토리얼 대충만 봐도 이해될걸요

Nest.js 같은 것들도 어려워보이지만 @ 골뱅이 집어넣는 코딩 패턴만 이상하고 복잡할 뿐 큰 차이는 없습니다.
그냥 내부적으로 express 쓰는데 그 안에 있던 코드를 많이 분리하고 재사용하기 위해 만든 프레임워크입니다.


Q. 백엔드 취업?

Node.js 백엔드도 비동기처리 원하는 곳들에서 많이 도입하는 추세인데
한국에선 백엔드를 전통적으로 Java + Spring을 많이 써왔기 때문에 그 포지션이 더 많습니다.
일각에선 Java + Spring이 더 빠르고 대용량 처리도 가능하고 안정적이라 많이 쓴다는 선입견도 있는데

- 웹프레임워크 벤치마크에 미친 사이트에 따르면 Fastify같은거 쓰면 성능은 다 고만고만합니다. 
(www.techempower.com/benchmarks)

- Node.js의 V8 엔진 덕분에 자주쓰이는 코드들은 자동으로 머신코드로 컴파일되기 때문에 피크 성능도 이론상 별 차이 없음
- 그리고 대량의 트래픽이 들어오는데 웹페이지를 빠르게 보내주고 싶으면

캐싱이랑 CDN이랑 쿼리성능 개선 어떻게 할지 생각해봐야지 서버 성능 따지는건 둘째입니다.

근데 그딴건 중요하지 않고 취업시장에 나를 맞춰야하지 않겠습니까
그래서 열린 포지션이 너무 없으면 자바 스프링을 추가로 공부하는 것도 나쁘지 않습니다.
요즘은 Spring Boot 덕분에 훨씬 쉬워져서 Node.js 같은걸로 서버가 어떻게 돌아가는지 미리 맛본 분들은 훨씬 빠르게 습득가능

 

Q. 강의 따라한거 포트폴리오로 제출해도 되나?

강의 코드 그대로 따라친거 그만 좀 제출하십시오.
5년 전에는 그래도 취업가능했지만 지금은 아닙니다.
최소한 지금 만든걸 개선해서 제출하려는 노력부터 하고
가장 좋은건 직접 처음부터 나만의 서비스를 만들어보는겁니다.

허접해도 그런게 낫지 선생님 코드 그대로 베낀티나는건 거르는 곳이 많습니다.
이걸 왜 이런식으로 코드짰는지 질문해보면 거르기 쉬움

포트폴리오 만들 때는 직접 동작시켜보는게 귀찮으니까 자동로그인되게 만들어두거나
사이트에 있는 기능을 영상이나 gif로 찍어서 설명해놓는게 좋습니다.

그리고 마무리로 swagger 같은거 찾아서 내가 만든 API들 요약본 정리해두는 것도 좋고
DB의 컬렉션과 document 구조같은 것도 ERD같은 느낌으로 대략적으로 그림 그려두면 약간 멋있어보입니다.

API들이 너무 많아지면 routes 파일을 만들어서 비슷한 API끼리 한 파일에 모아놓거나
아니면 API 안에 있는 코드가 너무 길면 함수로 빼고
비슷한 기능을 하는 함수정의들을 한 파일에 모아두면 깔끔해보일 수 있습니다.



Q. 저는 아직 혼자 코드를 못짜겠어요
 
실은 대부분의 웹서비스에 있는 기능들은 글발행 기능이랑 똑같으니 그렇게 하면 됩니다.
문법 쓰는 이유, 동작 원리, 큰그림 정도만 잘 알고 있으면 알아서 코드짤 수 있는게 정상인데
그게 안된다면 프로그래밍 기초 지식이 없거나
프로그래밍 기초를 이상한 곳에서 문법위주 수업으로 배운게 아닐까요
혼자 코드를 못짜겠으면 자바스크립트 기초강의를 추천드립니다.

 

Q. 혼자 코드짜도 이게 맞는 코드인지 모르겠다

의도대로 동작한다면 일단 모두 맞는 코드입니다. 

- 다만 DB에 나중에 document 데이터가 많아져도 출력, 수정, 삭제가 편리할지
- 에러나 예외사항이 발생에 대처가 가능한지
- 나중에 코드가 길어져도 찾아서 수정이 편리할지 

이거 정도만 생각해보면 됩니다. 

 

Q. 결제기능?


보통 다날 등 PG사와 계약해서 PG사 결제모듈을 사이트에 설치하는 식으로 구현하는데
포트원이라는 서비스 쓰면 쉽게 사용할 수 있습니다. 
포트원 라이브러리 문법으로 PG사에 결제요청하고 결제성공시 그 결과를 DB에 저장하든 뭘하든 하면 됩니다.
예제코드 복붙이 끝임
내가 외국에서 서비스를 한다면 Paypal, Stripe 이런 결제모듈 간단하게 붙이는게 더 쉽습니다.


Q. 에디터?

유저가 글을 작성할 때 에디터가 필요하다면 Quill js, ToastUI 이런게 쉽습니다. 
에디터는 그냥 유저가 작성한 글을 html이나 JSON으로 변환해서 DB에 저장할 수 있게 도와주는 간단한 UI 입니다.