여태까지 서버랑 통신할 때 GET, POST 요청 이런 걸로 통신하는 법을 배워봤는데

이걸 멋있는 말로 'HTTP 요청'이라고 부릅니다.

 

근데 일반적인 HTTP요청은 항상 유저가 먼저 요청을 해야 서버가 응답할 수 있는데

그런데 가끔 실시간 데이터를 요청하지도 않았는데 먼저 막 쏴주는 사이트들이 있습니다.

그런게 어떻게 가능하냐면 서버랑 유저가 통신하는 법이 몇개 더 있어서 그렇습니다. 

서버와 유저가 통신하는 법은 크게 3가지 정도가 있는데 

 

1. 일반 HTTP 요청

2. Server sent events

3. Websocket

각각 뭔지 알아봅시다.

 

 

 

 

1. 일반 HTTP 요청

 

우리가 지금까지 했던 GET, POST 등의 요청을 HTTP 요청이라고 부릅니다.

 

 



 

이건 비유하자면 편지같은겁니다.

편지는 쓸 때 마다 쓸데없이 주소적어야하고

내 정보도 적어야하고

거기까지 갔는지 확인도 해야하고 그러지 않습니까?

 실제 HTTP 통신할 때도 TCP라는걸 이용하기 때문에 실제로도 그런 번거롭고 오래걸리는 작업을 거칩니다. 

 

참고로 HTTP 2, 3 버전을 지원하는 서버를 만들면

HTTP요청을 좀 더 효율적으로 가볍게 만들 수 있는데

예를 들어 3버전 부터는 TCP가 아니라 더 가벼운 UDP를 쓰고 그런 식입니다.

근데 실 성능은 크게 차이는 안난다는 통계도 있습니다.

 

또 단점이 있는데 

꼭 유저가 먼저 편지를 보내야 서버가 응답해준다는 겁니다.

서버가 먼저 뭔가를 보내는 일은 없습니다.

그래서 이것만 쓰면 수동적인 서버기능 밖에 만들 수 없습니다.

 

 

 

 

 



 

2. Server sent events

 

둘째로 server sent events로 통신하는 방법도 있습니다.

- 서버에 한번 연결해두면 서버가 원할 때 맘대로 데이터를 유저에게 보내줄 수 있습니다.

- 서버에서 유저로 이렇게 일방향으로만 전달이 가능합니다. 

- 가벼워서 실시간 데이터 전달에 좋음

 

그래서 비유하자면 라디오같은거라고 생각하면 되겠습니다.

일방향으로 수신만 가능하니까요. 

참고로 이거 쓰고 싶으면 server sent events 쓰겠다고 서버에 HTTP요청을 날리면

서버가 이걸 server sent events로 업그레이드해주는 식으로 사용합니다.

 

 

 

 

 



 

3. Websocket

 

Websocket을 이용해서 유저와 서버가 통신할 수도 있는데

- 서버랑 유저가 자유롭게 실시간으로 데이터를 주고받을 수 있습니다.

- 유저가 먼저 보낼 수도 있고 서버가 먼저 보낼 수도 있습니다.

- 가벼워서 실시간 데이터 전달에 좋음

 

그래서 비유하자면 전화같은겁니다.

참고로 이거 쓰고 싶으면 websocket이라는 프로토콜을 사용하고싶다고 서버에 HTTP요청을 날리면

서버가 websocket으로 업그레이드해주는 식으로 사용합니다.

 

그럼 여기서 websocket이 가장 뭔가 좋아보이는데 그만큼 여러분이 코드짤 것도 많기 때문에

평소에는 그냥 일반 HTTP요청 하던거 그대로 쓰고 

- 서버에서 계속 유저에게 데이터를 푸시만 해주면 되는 경우엔 server sent events

- 채팅기능, 게임기능같은 실시간 양방향 통신을 구현하고 싶으면 websocket

쓰는게 좋습니다.

 

 

 

 

 

 

 

4. long polling

 

참고로 long polling 같은 방법도 있습니다.

 



 

(사진 : javascript.info)

 

서버로 HTTP 요청 날린 다음에 서버가 바로 응답.어쩌구()를 해주지 않고 계속 기다리는겁니다.

뭔가 새로운 내용이 들어오면 서버가 그제서야 응답.어쩌구()를 해주고

서버가 응답할 때 마다 다시 HTTP 요청을 날리는 테크닉같은 것인데

그럼 실시간 데이터를 계속 받아볼 수 있습니다.

실시간 메세지가 적을 때 유용합니다.

 

Node.js 서버는 long polling 써도 상관없는데

다른 서버는 응답 제때 안해주면 램초과로 서버가 다운될 수도 있습니다.

 