- Websocket (서버 - 클라이언트 간 양방향 통신 가능)
    : HTTP 메서드, Server sent events의 단방향 통신이라는 치명적인 단점을 해결하여, 양측 모두가 주도적 통신이 가능한 전화 같은 통신법
       -> (중요) 단! socket.io의 경우는 상호작용 시작에 있어서 클라이언트 측의 웹소켓 선빵 요청이 필수로 필요하다는 한계는 있음

    # 사용법
       : Websocket 쓰겠다고 서버에 HTTP요청을 날리면, 서버에서 Websocket로 업그레이드해주는 식으로 사용
         (= 정확히는 화면의 script 영역에서 웹소켓 관련 라이브러리 함수를 이용해서, server에서 웹소켓을 사용하는 코드와 상호작용할 수 있도록 함)

          ex) 채팅기능, 게임기능같은 실시간 양방향 통신의 구성이 필요한 경우 사용

- socket.io 
   : express 프레임워크에서 가장 많이 쓰는 websocket 관련 라이브러리로 사용이 손쉽고 간편하다는게 장점
      -> Node.js에서 순정으로 지원하는 ws라는 라이브러리도 존재함

      # socket.io 설치 및 세팅하기
         1) npm install socket.io@4 를 입력하여, socket.io 라이브러리 설치
         2) 보일러 플레이트를 server.js에 추가
             : (중요) new Server(createServer(express()))는 서버에서 클라이언트로 웹소켓을 연결하고 초기화한 뒤 해당 객체를 io 변수에 저장함
               (= new Server()를 통해 서버 -> 클라이언트 웹소켓 소통 가능)

               const { createServer } = require('http')
               const { Server } = require('socket.io')
               const server = createServer(app)
               const io = new Server(server) 

         3) DB서버 연결 관련 함수 listen()을 그냥 express() 기반에서, socket.io가 사용가능한 형식의 createServer(require('express')) 기반으로 변경
             -> express().listen() -> server.listen()으로 변경
                (= server = createServer( express() ) )

                ex) server.listen(process.env.PORT, () => {
                      console.log('http://localhost:8080 에서 서버 실행중')
                    })

         4) 클라이언트가 웹소켓 연결시, 서버에서 코드를 실행하기 위해서 server.js에 io.on('connection', 무명콜백함수 ( socket ) => { 내용 })을 입력하고, 클라이언트에서 선택하는 '채널명'에 따른 분기처리문을 써줌
             -> 하단의 io.on('connection', 무명콜백함수 ( socket ) => { 내용 } ) 내용 참고 바람

         5) 웹소켓 사용을 원하는 화면(html, jsx, ejs 등) 파일에도 script 태그를 넣어서 socket.io 라이브러리를 연결
             -> <script src="https://cdn.jsdelivr.net/npm/socket.io@4.7.2/client-dist/socket.io.min.js"></script>
         
         6) (중요) 화면(ejs) script 태그에서 const socket = io()을 통해, 화면에서 서버로 웹소켓을 연결하고 초기화한 객체를 socket 변수에 저장함


      # (중요) socket.io의 작동순서
          : 쉽게 말해, 클라이언트의 요청 선빵으로 시작하고...
             -> emit()으로 서버던 클라이언트건 '채널명'과 'room명'을 URL처럼 입력해서 원하는 클라이언트에 원하는 반응을하고 데이터를 보내주고
             -> on()으로 다른 측이 보낸 data를 받고 data 파라미터로 받은걸 가공하고, 후속작업을 침

              0) 상단의 설치 부분을 다 완료한걸 가정함
              1) 클라이언트 측에서 웹소켓 기능을 사용하는 화면에서 socket.io를 통해 서버에 웹소켓 요청을 보내는 기능 io().emit()을 사용
                  -> (클라이언트 to 서버) 특정 '채널명'으로 데이터를 보냄
              2) 서버 측에서 socket.io를 통한 웹소켓을 사용하는 new Server(server).on('connection') 코드를 찾아서 연결한 뒤에, socket객체를 parameter로 쓰는 콜백함수를 통해 클라이언트가 보낸 '채널명'을 찾음
              3) 클라이언트가 보낸 '채널명'에 해당하는 socket.on()을 실행하여 클라이언트가 보낸 데이터를 받음
                  -> 서버 측에서 클라이언트가 보낸 '채널명'을 URL처럼 보고, 그에 대응하는 API를 찾는 것과 유사한 행위 수행
              4) (생략가능) 서버측에서 클라이언트가 보낸 데이터를 가공하고 싶으면, data 객체를 parameter로 쓰는 콜백함수를 통해 이를 가공         
              5) 서버에서 클라이언트 측에 socket.io를 통해 웹소켓 요청을 보내는 기능을 new Server(server).emit()를 사용하여 수행
                  -> (서버 to 클라이언트) 특정 '채널명'으로 데이터를 보냄 
                     (= url없는 API없듯, 채널명 없는 웹소켓 요청은 존재해도 서버의 대응이 유의미하지 않음)

      # (중요) room 개념과 함수 사용법
         : room은 유저들이 입장할 수 있는 일종의 웹소켓 방과 같은 개념으로 socket 과는 또 별개로 취급됨
           (= 클라이언트가 특정 룸에 조인하고 나면 해당 룸은 해당 클라이언트가 연결을 끊을 때까지 socket과는 별개로 계속 존재)
               -> 특정 room에 있는 유저들에게만 메세지 전송하라는 코드를 짜는것이 가능하게 함
                  (= 채팅방에 있는 사람들에게만 채팅 메시지를 보내는게 가능)

      # socket.io 관련 주의사항
         1. server.js와 화면.ejs에서 웹소켓을 연결하는 키워드는 io라고 보면 되며, 
             -> server.js : new Server(createServer(express()))로 웹소켓에 연결하고 초기화한 결과를 io라는 js변수가 받음
                             -> (중요) 클라이언트의 요청에 대응하기 위해, 콜백함수(socket){ 내용 }을 paramter로 가지고, socket.on()을 통해 내용을 적음
             -> 화면.ejs  : io() 함수로 웹소켓에 연결하고 초기화한 결과를 server라는 js변수가 받음

         2. server, 화면 둘 다 웹소켓 함수는 크게 2가지라고 보면 되며, 공통된 parameter로 URL역할의 '채널명'이 들어감
             -> emit() : 상대 쪽에 데이터를 전송할 떄 사용하는 함수
             -> on()   : 상대 쪽에서 보낸 데이터를 수산할 떄 사용하는 함수
                          -> (중요) 상대편의 데이터를 받고 가공하기 위해, 콜백함수(data){ 내용 }을 paramter로 가짐

      # socket.io 사용하여 양방향 소통하는 함수를 사용하여 socket.io를 사용한 api 작성법
         1. (server.js) 
              : const io = new Server( createServer( express() ) ) 기반
                (= server.js에서 사용되는 변수 = 서버가 소통의 시작(= 서버 -> 클라이언트)이라는 의미를 암시)
 
                 1) (중요!!) io.on('connection', 무명콜백함수 ( socket ) => { 내용 } )
                     : 어떤 클라이언트라도 서버에 웹소켓 요청한게 감지되면 작동하며, 서버에서 특정 코드를 실행하고 싶은 경우의 내용을 무명콜백함수에 넣어 사용
                        -> 쉽게 말해, 서버를 향한 웹소켓 요청 감지하면 io.on('connection') 발동 후, 무명콜백함수 ( socket ) => { 내용 }을 실행하게 되며, 클라이언트의 '채널명'에 따라 API 실행하듯 socket.on을 분기처리 실행
 
                      @ (중요!) 무명콜백함수의 parameter socket ( <-> (중요) 화면.ejs에서 사용하는 io()를 받는 변수 socket)
                         : socket.io에 내장된 블랙박스인 클라이언트로부터 데이터 수신시에 이를 받고 처리할 목적으로 실행되는 'websocket 객체' 그 자체
                            -> 클라이언트와의 실시간 데이터 수신 자체는 무명콜백함수를 통해 paramter로 삽입된 해당 socket를 매개로 socket의 메서드들을 실행하여 이뤄짐
                                -> (중요) socket.id는 매 연결에 대해 무작위로 생성되는데, 이를 통해 각각의 연결을 구별할 수 있음
 
                               a. socket.on('클라이언트가 붙인 채널명', (클라이언트로부터 받은 data 객체 parameter) => { 내용 }
                                   : 클라이언트에게서 서버가 '채널명'이란 이름으로 보내진 내용의 데이터를 '수신'하게 되면, 그 수신한 data를 parameter로 받아 가공한 무명콜백함수 ( 클라이언트로부터 받은 data 객체 parameter ) => { 내용 } 를 실행해 주는 API에 해당
                                     (= io.on() 안에 여러가지의 채널명 = URL과 같은 개념이며, 이러한 채널명들을 대비한 API에 해당하는 socket.on() 기입은 자유로히 가능함)
                                         -> (중요) 서버의 io.on('connection', (socket) => { 내용 } )안에는 클라이언트가 기입한 '채널명'들에 따라 어떻게 반응할지에 대한 경우의 수만큼 socket.on('채널명', (data) => { 내용 }이 작성됨
 
                               b. socket.join('대상 room이름') 
                                   : 클라이언트가 서버가 socket.on() 에 상정한 특정 '채널명'(개발자 마음대로 지어도 됨)으로 요청을 먼저 보낸다면 
                                      -> 서버는 그 클라이언트를 '대상 room이름'으로 되어있는 'room의 멤버로 해당 클라이언트를 끼워줌'
                                         (= 서버는 room에 있는 클라이언트들을 구분하여, 데이터를 보낼 수 있음)
                                      -> (중요!) 전송결과에 대한 반환값은 없음 (= undefined)
 
                               c. socket.request.session
                                  : passport 라이브러리 사용시 socket.io와 연계하여 로그인 정보에 해당하는 쿠키를 전송하는 미들웨어를 실행하여 서버에 보내면, 서버가 쉽게 클라이언트의 로그인 정보를 출력가능하게 되는 객체 속성
                                    (= 메세지 보내는 유저가 누구인지 확인하고 그걸 웹소켓 기능에 응용할 수 있다는 것)
                                       -> https://socket.io/how-to/use-with-express-session 참고하여 실행하면 사용 가능
 
                      @ (중요) 참고사항 및 특성  
                         [1] data.멤버변수 
                              : 클라이언트 측에서 보낸 데이터를 2개 이상의 멤버변수들이 존재하는 js객체 타입으로 서버에 보냈으면, 구체적인 멤버변수를 지정해서 무명콜백함수의 내용을 작성해야함
                                (= 1개의 데이터를 개별로 보냈으면, 그냥 data로 참고 및 접근이 가능함)
 
                         [2] socket.join('대상 room이름')에 대한 room 생성요구 승인 및 실행에 대한 반환값은 성공여부와 관련없이 undefined
                         [3] io.emit('서버가 붙인 채널명', '서버가 보낸 메세지')의 전송결과에 대한 반환값은 boolean
                             (= 전송 성공결과에 따라 true/false로 분기)

                         [4] socket.id는 매 연결에 대해 무작위로 생성되는데, 이를 통해 각각의 연결을 구별할 수 있음
 
                 2) io.emit('서버가 붙인 채널명', '서버가 보낸 메세지') 
                     : ('서버 -> 모든 클라이언트') 서버에 모든 연결된 '모든' 클라이언트들에게로 어떤 데이터를 웹소켓으로 전송하고 싶을때 사용
                         -> (중요) 전송결과에 대한 반환값은 boolean 값 (= 전송 성공결과에 따라 true/false로 분기)
 
                 3) io.to(data.room).emit('서버가 붙인 채널명', data.msg or '메시지 내용 입력') 
                    : ('서버 -> 특정 room의 클라이언트') 클라이언트가 요청한 data.room안의 '특정 room'의 클라이언트들에게로 data.msg 데이터를 웹소켓으로 전송하고 싶을때 사용                         
                         -> (중요) 전송결과에 대한 반환값은 boolean 값 (= 전송 성공결과에 따라 true/false로 분기)
 
                     @ 해당 함수는 io.on('connection', ( socket ) => { socket.on('채널명', ( data ) => { 내용 } ) } ) 과정에서 마지막 내용으로 들어가기에
                        -> data 객체는 socket.on()의 무명콜백함수의 paramter로 들어간 클라이언트가 보낸 정보에 해당하는 객체라고 보면 됨
                            -> data.room or data.msg가 무엇인지는 하단 io().emit('채널명', { msg : '메세지내용', room : '대상 room' } ) 을 참고하라

         2. (화면.ejs) 
              : const socket = io() 기반
                (= 화면.ejs의 script 태그 내에서 사용되는 변수 = 클라이언트의 화면(= 클라이언트 -> 서버)이 소통의 시작이라는 의미를 암시)

                1) io().on('클라이언트가 붙인 채널명', 무명콜백함수 ( 서버로부터 받은 데이터 객체 parameter ) => { 내용 } )
                    : 서버에서 보낸 메세지나 데이터를 '수신'한 뒤, 그를 기반으로 클라이언트에서 특정 코드를 실행하고 싶은 경우 사용

                2) io().emit('클라이언트가 붙인 클라이언트 측에서 붙인 채널명', '데이터')  
                    : ('클라이언트 -> 서버') 클라이언트가 웹소켓으로 어떤 데이터를 서버로 전송하고 싶을떄 사용

                3) io().emit('클라이언트가 붙인 클라이언트 측에서 붙인 채널명', { msg : '메세지내용', room : '대상 room' } ) 
                    : ('클라이언트 -> 서버') 클라이언트가 특정한 '대상 room'에 소속된 다른 클라이언트들에게 웹소켓으로 '메세지내용' or 데이터를 실시간으로 보내달라고 서버에 요청할 때 사용
