<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="/main.css" rel="stylesheet">
    <title>Document</title>
</head>
<body class="grey-bg">

    <!-- include(파일위치)를 통해, js를 붙일 수 있음 -->
    <%- include('nav.ejs') %>

    <input class="search" value="<%= 검색어 %>">
    <button class="search-send regex">검색(정규식)</button> 
    <button class="search-send text_index">검색(text Index)</button> 
    <button class="search-send search_index">검색(search Index)</button> 

    <div class="white-bg">

    <!-- 반복문을 통해 js변수 내부 객체배열의 값을 반복해서 만들어 낸 HTML 태그 -->
    <% for (var i = 0; i < 글목록.length; i++){ %>

        <div class="white-box">
            <div class="list-box">
                <!-- 템플릿 기호는 ""안에서도 인식되며, 링크를 만들수 있게 함 -->
                <a href="/board/detail/<%= 글목록[i]._id %>">
                    <h4><%= 글목록[i].title %></h4>
                </a>
                <p><%= 글목록[i].content %></p>
                <!-- 수정화면 이동 버튼 -->
                <a href="/board/edit/<%= 글목록[i]._id %>">✏️</a>
                <!-- 삭제기능 수행 버튼 -->
                <span class="delete1">🗑️</span>
                <span class="delete2" data-id="<%= 글목록[i]._id %>" data-row="<%= i %>">🗑️</span>
            </div>
        </div>
        
    <% } %> 

        <!-- 정규식 -->
        <div class="white-box">
            [정규식]</br>
            <% if ( ( (페이지 * 1) != 1 ) || (갯수 == 0) ) { %>
                <a href="/board/search/ver1/<%= parseInt(페이지) - 1 %>?val=<%= 검색어 %>">이전(정규식)</a>
            <% } %> 
    
            <% for (var j = 1; j <= Math.trunc( (갯수 - 1) / 5) + 1; j++){ %>
                <a href="/board/search/ver1/<%=j%>?val=<%= 검색어 %>"> <%= j %> </a>
            <% } %> 
    
            <% if ( ( (페이지 * 1) != Math.trunc( (갯수 - 1) / 5) + 1 ) || (갯수 == 0) ) { %>
                <a href="/board/search/ver1/<%= parseInt(페이지) + 1 %>?val=<%= 검색어 %>">다음(정규식)</a>
            <% } %> 
    
        </div>
    
        </br>

        <!-- text index -->
        <div class="white-box">
            [text index]</br>
            <% if ( ( (페이지 * 1) != 1 ) || (갯수 == 0) ) { %>
                <a href="/board/search/ver1/<%= parseInt(페이지) - 1 %>?val=<%= 검색어 %>">이전(text index)</a>
            <% } %> 
    
            <% for (var j = 1; j <= Math.trunc( (갯수 - 1) / 5) + 1; j++){ %>
                <a href="/board/search/ver1/<%=j%>?val=<%= 검색어 %>"> <%= j %> </a>
            <% } %> 
    
            <% if ( ( (페이지 * 1) != Math.trunc( (갯수 - 1) / 5) + 1 ) || (갯수 == 0) ) { %>
                <a href="/board/search/ver1/<%= parseInt(페이지) + 1 %>?val=<%= 검색어 %>">다음(text index)</a>
            <% } %> 
    
        </div>
    
        </br>

        <!-- search index -->
        <div class="white-box">
            [search index]</br>
            <% if ( (페이지 * 1) != 1 ){ %>
                <a href="/board/search/ver3/<%= parseInt(페이지) - 1 %>?val=<%= 검색어 %>">이전(search index)</a>
            <% } %> 
    
            <% for (var j = 1; j <= Math.trunc( (갯수 - 1) / 5) + 1; j++){ %>
                <a href="/board/search/ver3/<%=j%>?val=<%= 검색어 %>"> <%= j %> </a>
            <% } %> 
    
            <% if ( (페이지 * 1) != Math.trunc( (갯수 - 1) / 5) + 1 ){ %>
                <a href="/board/search/ver3/<%= parseInt(페이지) + 1 %>?val=<%= 검색어 %>">다음(search index)</a>
            <% } %> 

        </div>

    </div> 

</body>
<script>

    // 리스트 검색기능 구현1 : 정규식 사용
    document.querySelector('.regex').addEventListener('click', function(){
        let 입력한거 = document.querySelector('.search').value

        // (window).location.href : window객체의 브라우저의 요소를 구성하는 객체로, a태그의 href속성의 그것과 같이 현재 위치하는 url 주소를 띄어줌
        //   -> a태그를 클릭시 일어나는 그것도 이와 같은 녀석
        //   -> 이벤트 리스너를 통해 변경도 가능함
        //   -> (중요) [단점1] 이를 통해서는 GET방식의 호출 밖에 할 수 없음
        //   -> (중요) [단점2] 반드시 새로고침이 일어나는 방식임
        location.href = '/board/search/ver1/1?val=' + 입력한거
    })

    // 리스트 검색기능 구현2 : text기준 index 사용
    document.querySelector('.text_index').addEventListener('click', function(){
        let 입력한거 = document.querySelector('.search').value
        location.href = '/board/search/ver2/1?val=' + 입력한거
    })

    document.querySelector('.search_index').addEventListener('click', function(){
        let 입력한거 = document.querySelector('.search').value
        location.href = '/board/search/ver3/1?val=' + 입력한거
    })
    
    
    <% for (var i = 0; i < 글목록.length; i++){ %>

            // 삭제기능 구현1) FORM태그 없이 이벤트리스너를 통한 클릭시, 이를 QueryString 방식으로 서버 API호출하여 구현 + then, catch, finally 사용하여 DOM구조 조작까지 해보기
            document.querySelectorAll('.delete1')[<%= i %>].addEventListener('click', function(){
                if( confirm('1번째 방식으로 삭제할까요?') ){
                    fetch(`/board/delete?id=<%= 글목록[i]._id %>`,  { method : 'DELETE' })
                    .then( (응답) => 응답.text() )
                    .then( (응답) => {
                        document.querySelectorAll('.delete1')[<%= i %>].parentElement.style.display = 'none'
                    })
                }
            });

            // 삭제기능 구현2) 구현1에 HTML의 data 속성을 이용하여 만들어진 dataset 객체를 통해 값을 가져온 뒤, 이를 QueryString 방식으로 서버 API호출하여 구현 + async await 사용하여 DOM구조 조작까지 해보기
            document.querySelectorAll('.delete2')[<%= i %>].addEventListener('click', async function(e){
                if( confirm('2번째 방식으로 삭제할까요?') ){

                    // (중요!) await가 붙으면, 해당 함수 {}안의 해당 비동기코드가 응답이 돌아올떄까지 이를 기다려줌
                    //  -> 그런 의미에서 fetch를 통한 API 호출은 async await를 사용시 반드시 await를 붙여줘야함.. 그래야 fetch가 끝날떄까지 기다려줌 
                    let result = await fetch('/board/delete?id=' + e.target.dataset.id, { method : 'DELETE' });
                    let response = await result.text();
                    e.target.parentElement.style.display = 'none';
                }
            });
    <% } %> 

</script>
</html>