- 템플릿 엔진
   : 서버사이드 렌더링을 통해 웹앱 측에서 페이지를 동적으로 생성할 때 사용하는 일종의 양식으로, 서버에서 받은 데이터를 기반으로 HTML 문서를 생성하는 역할하는 일종의 도구
      -> 이를 통해 서버는 생성된 웹페이지를 직접 클라이언트로 보내줌

    # 템플릿 엔진 사용의 이점
       1. 초기 페이지 로딩 속도를 향상
       2. 검색 엔진 최적화(SEO) 가능
       3. 개발자로 하여금 서버사이드 렌더링 프로세스를 쉽게 다룰 수 있도록 도와줌

- EJS
   : Node JS를 기반으로 하는 웹서버에서 사용하는 템플릿 엔진 라이브러리
     (= JSP 1.5에서 사용하는 초기 엄격한 용도로 구분된 기호를 기반으로 한 템플릿과 유사함)

    # EJS에서 사용하는 템플릿 기호들

       1. <% (= 스크립틀릿(Scriptlet) )
          : <% %> 안에 작성된 영역들은 주로 변수 선언이나 제어 구문과 같은 동적인 로직을 담당하는 코드로 구성됨
             -> (주의!) 여기다가 함수 작성하거나, HTML에 값을 출력할 목적으로 해당 기호를 쓰면 안됨!!!

       2. <%@ (= 지시어, 디렉티브(Directive) )
          : <%@ %> 안에 작성된 영역들은 페이지에 필요한 지시사항이나 설정을 정의하는 코드로만 구성되어 있음

             ex) import 설정, HTML 헤드영역 작성

       3. <%= (= 표현식(Expression) )
          : <%= %> 안에 작성된 영역들은 해당 위치에 있는 변수나 값을 HTML로 출력
             -> (중요!) 반드시 이 기호를 사용하여 동적으로 생성된 값을 웹 페이지에 표시하여야 함

       4. <%! (= 선언문(Declaration) )
          : <%! %> 안에 작성된 영역들은 함수나 메서드를 선언 시에 사용되며, 이 부분에서 정의된 함수는 스크립틀릿 내부에서 호출 가능
            (= 함수를 선언할거면 반드시 여기서 선언해야하며, 안 그러면 에러의 원인이 됨!)

    # EJS 사용법
      1. 터미널에 npm install ejs 입력하여 EJS 라이브러리 설치
      2. 서버사이드 렌더링시 사용할 EJS 파일이 있다면?
          -> 서버사이드 렌더링으로 생성할 페이지라는 의미의 view라는 폴더를 만들고 그 안에 생성함
      3. 생성할 파일에 HTML와 템플릿 양식을 통해, 서버에서 받은 데이터가 들어갈 위치를 배치하고 페이지를 작성함

      