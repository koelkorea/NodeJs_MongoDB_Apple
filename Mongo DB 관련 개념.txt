- DB(DataBase)
   : 데이터를 대량으로 영구적으로 보관 + 그 데이터를 빠르게 입/출력 하는데 특화 + 여러 사용자가 공유하여 사용할수 있는 통합해서 저장한 운영 데이터의 집합
      -> 일반적으로 데이터베이스 관리 시스템(DBMS)에 의해 제어

     # DB의 종류
        1. 관계형 데이터베이스 (RDBMS)
            : 각 데이터들이 1개 이상의 '행 : 열' = 'key : value' 관계로 이뤄진 테이블 형식의 스키마에 저장되어 있는 DB
              (= 서로 다른 데이터 구조가 어떻게 관련되어 있는지 명확하게 정규화되어 정의되어 있기에, 쉽게 파악하고 이해 가능)
                  -> 정규화 되어 있기에, 데이터 입/출력의 정확도가 뛰어난 편

                      EX) MySQL, PostgreSQL, Oracle, SQLite, MSSQL
                           -> 아주 대부분의 프로젝트들이 사용하는 DB들이 다 여기 있으며, SQL 사용

        
        2. 비관계형 데이터베이스 (NoSQL)
            : 1과 같은 테이블 형식의 스키마를 사용하지 않는 DB
              (= 명확하고 정확도는 기대 못하지만? 자유롭게 이용가능하며, JSON형식과 유사하게 사용 가능)
                  -> 정규화 안해도 되서 단순하고 빠르지만, 데이터 입/출력이 정확하지 않아, 정교한 조직이나 수정이 힘들다

                      EX) MongoDB, Redis

- MongoDB
   : 비관계형 데이터베이스 DB 중 하나

      # MongoDB 구조 종류
         : document 데이터베이스 = Database -> collection(= Table) -> document단위를 기준으로 한 document당 js객체와 같은 형식으로 구성
            -> 코드짜던 js 객체 내용 그대로 데이터베이스에 밀어넣을 수 있어서 매우 저장과 출력이 편리
     
                ex) Database 예시

                    1. collection (테이블)
                       { name : 'kim'
                         age  : 20   }     <- document (데이터 단수)
            
                       { name : 'lee'
                         age  : 21   }     <- document (데이터 단수)
    
                    2. collection (테이블)
                       { goods   : 'apple'
                         quality : 3   }     <- document (데이터 단수)
            
                       { goods   : 'peer'
                         quality : 8   }     <- document (데이터 단수)


      # MongoDB 사용법
         1. 설치해서 쓰기
         2. mongodb.com 클라우드에서 호스팅받기 (추천)
             -> 클라우드라 따로 생성 필요X
             -> 무료용량 제공
             -> full text search index 기능 제공
             -> 돈을 내면, replica set이라고 해서 자동으로 3개의 데이터베이스에 분산저장 및 백업 제공

                1) mongodb.com 가입 후, 설문
                2) 무료 티어 선택 + 위치는 서울 추천 
                3) create! 후, 좌측 Database Access 메뉴에서 해당 클라우드 DB 접속용 아이디/비번을 만듦
                    -> (주의!) mongodb.com 계정이 아니라, 해당 db서버 계정에 대한 것임
                4) Bulit-in role에 atlas admin으로 설정
                    -> (중요) 이렇게 해줘야, nodejs에서 DB 접속시 온갖 것들을 다 사용가능
                5) 좌측 Network Access 메뉴에서 IP를 추가하여, 데이터베이스 접속할 수 있는 IP를 미리 정의해놓는 일종의 보안 설정
                    -> 보안 필요없이 아무데서나 쓸거면, Allow access from anywhere을 누르시거나 0.0.0.0/0 을 추가
                6) create DataBase를 통해, DB의 이름과 collection의 이름을 정하고 생성
                    -> (중요) 이렇게 PROJECT > DB > collection > document(= db의 행에 해당하는 개별 데이터)의 위계를 따르게 됨
                7) 웹서버와 해당 MongoDB 연결
                
      # Collection
         : MongoDB에서 기존 관계형 DB에서 사용하는 Table 단위와 비슷한 개념으로 존재하는 폴더.. 
            -> 이를 기준으로 각 DB는 자신 안의 데이터들을 저장할 위치를 구분함

      # MongoDB와 웹서버 연결하기
         1. npm install mongodb@5 를 입력하여, mongodb 라이브러리 설치
         2. 보일러 플레이트를 server.js에 추가

            const { MongoClient } = require('mongodb')
   
            let db
            const url = 'mongodb사이트에 있던 님들의 DB 접속 URL'

            new MongoClient(url).connect().then((client)=>{

              console.log('DB연결성공')
              db = client.db('forum')   <- 간단히 설명하면 님들이 호스팅받은 mongodb에 접속하고 접속 결과를 db라는 변수에 저장

              app.listen(8080, () => {
                console.log('http://localhost:8080 에서 서버 실행중')
              })

            }).catch((err)=>{
                
              console.log(err)
            })

         3. url 변수에 'DB접속 URL'을 찾아넣자
             -> 만든 database의 connect 버튼을 누른 뒤, driver를 선택하면..
                "mongodb+srv://DB접속아이디:DB접속비번@cluster0.jea.mongodb.net/?retryWrites=true&w=majority"
                  -> 이런 느낌의 문자열이 나오는데, 이걸 찾아서 대입해주면 됨

      # MongoDB의 CRUD 사용법
         : client.db('프로젝트명').collection('컬렉션명').CRUD함수명({내용}) 형식으로 작성
            -> (주의) 기본적으로 MongoDB의 CRUD 함수는 Promise 객체를 활용하여 '비동기적'으로 작동하도록 작성된 함수라는 점을 명심... 
                      (= 따라서 MongoDB는 컨텍스트 제어를 위한 async, await를 항시 사용할 것을 권유함.. 그게 아니면 db요청 결과를 기다리지 않고, 그냥 진행함)
         
           1. (컬랙션명에 데이터를) 입력(insertOne)
               : client.db('프로젝트명').collection('컬렉션명').insertOne( {칼럼명1 : '내용1'} , ... , {칼럼명2 : '내용2'} )

           2. 단일 데이터만 수정(updateOne)
               : client.db('프로젝트명').collection('컬렉션명').updateOne( {수정할 데이터 검색할 칼럼명 : '원래 내용'}, $예약어 {칼럼명1 : '수정할 내용1'} , ... , {칼럼명2 : '수정할 내용2'} } )

                 @ 예약어 리스트
                    1) set : 일반적인 데이터 덮어쓰기
                        
                        -> client.db('프로젝트명').collection('컬렉션명').updateOne( {수정할 데이터 검색할 칼럼명 : '원래 내용'}, { $set: {칼럼명1 : '수정할 내용1'} , ... , {칼럼명2 : '수정할 내용2'} } )

                    2) inc : 숫자로 적힌 해당 칼럼의 데이터를 적혀있는 양수/음수 만큼 더하거나 뺀 결과로 갱신해준다
                           
                        -> client.db('프로젝트명').collection('컬렉션명').updateOne( {수정할 데이터 검색할 칼럼명 : '원래 내용'}, { $inc: {칼럼명1 : 양수/음수} , ... , {칼럼명2 : 양수/음수} } )

                    3) mul : 숫자로 적힌 해당 칼럼의 데이터를 적혀있는 양수/음수 만큼 곱한 결과로 갱신해준다
                           
                        -> client.db('프로젝트명').collection('컬렉션명').updateOne( {수정할 데이터 검색할 칼럼명 : '원래 내용'}, { $mul: {칼럼명1 : 양수/음수} , ... , {칼럼명2 : 양수/음수} } )

                    4) unset : 해당 데이터를 찾은뒤 기존에 있던 필드를 제거함

                        -> client.db('프로젝트명').collection('컬렉션명').updateOne( {수정할 데이터 검색할 칼럼명 : '원래 내용'}, { $unset: 칼럼명1 , ... , 칼럼명2 } } )

           3. (검색에 해당되는) 복수 데이터들 일괄 수정(updateMany)
               : client.db('프로젝트명').collection('컬렉션명').updateMany( {수정할 데이터 검색할 칼럼명 : '원래 내용' or { $조건식 : 숫자 } }, $예약어 {칼럼명1 : '수정할 내용1'} , ... , {칼럼명2 : '수정할 내용2'} } )

                 @ 조건식
                    : > 5, <= 6 이런식으로 특정 연산조건에 맞는 데이터들만 골라서 검색할 떄 사용
                       ->  {수정할 데이터 검색할 칼럼명 : { $조건식 : 숫자 } } 이런식으로 {}를 하나 더 만듦

                            1) gt(greater than)        : '>' 초과를 의미
                            2) gte(greater than equal) : '>=' 이상을 의미
                            3) lt(greater than)        : '<' 미만을 의미   
                            4) lte(greater than equal) : '<=' 이하를 의미   
                            5) ne(not equal) : '!=' 어떤 수가 아님을 의미              

                               ex1) client.db('프로젝트명').collection('컬렉션명').updateMany( {수정할 데이터 검색할 칼럼명 : { $gt : 5 } }, { $set: {칼럼명1 : '수정할 내용1'} } )
                                     : 칼럼명이 5를 초과하는 모든 데이터의 칼럼명1의 값을 '수정할 내용1'로 수정해라

                               ex2) client.db('프로젝트명').collection('컬렉션명').updateMany( {수정할 데이터 검색할 칼럼명 : { $gte : 3 } }, { $inc: {칼럼명1 : -5} } )
                                     : 칼럼명이 3이 아닌 모든 데이터의 칼럼명1의 값을 -5해라

           3. 목록조회(find)
               : client.db('프로젝트명').collection('컬렉션명').find() 
                  -> 해당 프로젝트의 collection에 위치한 원하는 데이터 목록의 시작점이 위치한 DB의 커서 Cursor(DB 포인터 -> 메모리 주소)를 반환해 줌

                 @ Cursor 개념
                    : MongoDB에서 사용하는 데이터가 위치한 DB의 포인터에 해당되는 개념의 js객체로 find() 함수를 통한 쿼리의 결과값으로 반환됨
                       -> (중요) 그리고 이 Cursor 객체는 Cursor 객체를 parameter삼아 반환값으로 내놓는 메서드들을 가지고 있고, 메서드 chaining 사용가능함

                 @ find() 함수 기본 사용법
                    : find()안에 검색조건이 없으면, 해당 collection의 모든 데이터를 대상으로 함
                      (= find() 안에 칼럼명 : '내용' or '조건식'을 통해 검색조건을 내걸어서 원하는 데이터만 뽑는 쿼리를 작성도 가능함)

                       ex1) client.db('프로젝트명').collection('컬렉션명').findOne( { 칼럼명1 : '내용'}, ... , {칼럼명2 : '내용'} )
                       ex2) client.db('프로젝트명').collection('컬렉션명').findOne( { 칼럼명1 : { $조건식 : 숫자 } } , ... , { 칼럼명2 : { $조건식 : 숫자 } )

                 @ 대표적 Cursor 메서드들(cursor로 리턴되는 한 체이닝 가능)

                    1) cursor객체변수.toArray()
                        : MongoDB내부에서 제공하는 'Cursor객체(= db 포인터) -> JS object배열'로 변환시켜 실체화된 데이터로 다룰 수 있게 하는 메서드

                    2) cursor객체변수.count()
                        : 해당 cursor가 가르키는 위치에 존재하는 데이터의 수를 집계함

                    3) cursor객체변수.skip(숫자)
                        : 해당 cursor가 가르키는 위치에 존재하는 1번째 데이터를 기준으로 몇 개의 데이터를 데이터 목록에서 뺌
                           -> (주의) 너무 큰 수를 적으면, 성능에 지장 생김

                    4) cursor객체변수.limit(숫자)
                        : 해당 cursor가 가르키는 위치에 존재하는 데이터를 기준으로 몇 개의 데이터만 데이터 목록에 반영 
                           -> cursor는 데이터가 위치한 곳의 시작 위치를 알려줄 뿐이라, 관계형 db처럼 실제로 뽑아온 데이터를 바탕으로 재가공에 재가공 체이닝을 거는 기능을 약할 수 밖에 없음.. 대충 거기 기준 몇개 거르고 몇개 뽑아와 정도...
                              (= limit와 sort를 체이닝 해봐야 관계형DB처럼 연쇄가공을 통한 원하는 데이터를 조작하듯 뽑는게 많이 힘듦... limit가 먼저오면 sort가 씹힌다)

                    5) cursor객체변수.sort( {기준칼럼 : + or -} )
                        : 해당 cursor가 가르키는 위치에 존재하는 데이터목록을 정렬값에 따라 오름차순 or 내림차순하여 목록에 반영

                    6) cursor객체변수.next()
                        : 현재 cursor의 값을 기준으로 다음 데이터의 위치를 반환

                 @ (응용) 만약..? 페이지네이션 같이 특정 부분에 존재하는 데이터들을 몇 개만 가져오고 싶으면?
                    : find() 함수를 사용하여 뽑은 목록값에 추가적인 함수 chaining을 통해 추가적 데이터 목록의 통제가 가능
                      (해당 db위치를 기준으로 ( [생략가능] '숫자'만큼의 데이터들은 건너뛰고) '숫자'만큼의 데이터만 가져옴)
                        -> cursor객체변수.[skip(숫자)].limit(숫자).toArray();


           4. 개별조회(findOne)
               : client.db('프로젝트명').collection('컬렉션명').findOne( {칼럼명 : '내용'} );
                  -> 칼럼명이 '내용'에 들어맞는 어떤 1가지의 데이터만 뽑음

                 @ (주의) 데이터의 고유 id인 _id를 찾아서 검색하고 싶은 경우
                     1) const { ObjectId } = require('mongodb') 코드를 반드시 추가해야 함
                        -> 정확히는 ID기반 검색시 생성된 JS에서 이 ID정보를 인식하고 DB에 검색 명령 내릴때 전달가능하게 하는 JS객체에 해당하는 ObjectId 변수가 모듈의 사용영역에 포함되어 있어야함 
         
                     2) 개별검색 항목에 입력하는 id번호는 new ObjectId(id번호) 형식으로 내용을 기입
                     
                        ex1) URL 파러미터 사용시
                           
                            app.get('/detail/:id', async (요청, 응답) => {
                               let result = await db.collection('post').findOne({_id : new ObjectId(요청.params.id)});
                               응답.render('detail.ejs', { 상세글 : result })
                            });

                        ex2) QueryString 사용시
                           
                            app.get('/detail', async (요청, 응답) => {
                               let result = await db.collection('post').findOne({_id : new ObjectId(요청.query.id)});
                               응답.render('detail.ejs', { 상세글 : result })
                            });

      # express HTTP API와 연계된 MongoDB의 CRUD 작성법
         : express 라이브러리의 HTTP 메서드에 해당하는 함수에 parameter로 들어갈 URL과 그에 대응하는 CRUD를 담은 무명함수를 적어서 API로 완성함

           ex) app.get('/news', ()=>{
                 db.collection('컬렉션명').insertOne({title : '어쩌구'})         // MongoDB의 CRUD 함수
               })

               app.get('/list', async (요청, 응답) => {
                 let result = await db.collection('컬렉션명').find().toArray()   // MongoDB의 CRUD는 비동기로 작동하는 코드라는 점도 잊지마라!
                 응답.send(result[0].title)
               })

      # MongoDB에서 가져온 데이터를 HTML에 뿌리려면 어떻게 해야하나?
         : JS의 템플릿 엔진과 관련된 라이브러리를 통해서 뿌리면 됨... 템플릿 엔진 관련 문서 참조
           (= 그러니까 JSP에서 DB의 데이터 뿌릴 때, 쓰던 방식과 유사하다 생각하면 됨)